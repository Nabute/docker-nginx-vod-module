worker_processes  auto;

events {
	use epoll;
}

http {
	log_format  main  '$remote_addr $remote_user [$time_local] "$request" '
		'$status "$http_referer" "$http_user_agent"';

	access_log  /dev/stdout  main;
	error_log   stderr debug;

	default_type  application/octet-stream;
	include       /usr/local/nginx/conf/mime.types;

	# tcp_nopush  on;
	tcp_nodelay on;


	open_file_cache          max=1000 inactive=5m;
	open_file_cache_valid    2m;
	open_file_cache_min_uses 1;
	open_file_cache_errors   on;

	aio on;


	server {
		listen ${PORT};
		server_name localhost;

		vod_mode remote;
		vod_upstream_location /remote;
		vod_drm_upstream_location /drm;

		vod_metadata_cache                 metadata_cache 2048m;
		vod_response_cache response_cache  128m;
		vod_last_modified_types            *;
		vod_segment_duration               9000;
		vod_align_segments_to_key_frames   on;
		vod_dash_fragment_file_name_prefix "segment";
		vod_hls_segment_file_name_prefix   "segment";

		vod_drm_info_cache drm_cache 64m;
		# vod_min_single_nalu_per_frame_segment 2;
		vod_drm_clear_lead_segment_count 1;

		vod_dash_absolute_manifest_urls    off;
		vod_hls_absolute_master_urls       off;
		vod_hls_absolute_index_urls       off;

		vod_manifest_segment_durations_mode accurate;

		aws_access_key ${AWS_ACCESS_KEY};
		aws_key_scope ${AWS_KEY_SCOPE};
		aws_signing_key ${AWS_SIGNING_KEY};
		aws_s3_bucket ${AWS_S3_BUCKET};


		location ^~ /remote/dash/ {
			aws_sign;
			internal;
			rewrite ^/remote/dash/(.*) /$1 break;
			proxy_pass http://${AWS_S3_BUCKET}.s3.amazonaws.com;
			proxy_set_header Host ${AWS_S3_BUCKET}.s3.amazonaws.com;
			proxy_set_header x-amz-cf-id ""; # https://github.com/anomalizer/ngx_aws_auth/issues/6
		}

		location ^~ /remote/hls/ {
			aws_sign;
			internal;
			rewrite ^/remote/hls/(.*) /$1 break;
			proxy_pass http://${AWS_S3_BUCKET}.s3.amazonaws.com;
			proxy_set_header Host ${AWS_S3_BUCKET}.s3.amazonaws.com;
			proxy_set_header x-amz-cf-id "";
		}

		location ^~ /remote/mss/ {
			aws_sign;
			internal;
			rewrite ^/remote/mss/(.*) /$1 break;
			proxy_pass http://${AWS_S3_BUCKET}.s3.amazonaws.com;
			proxy_set_header Host ${AWS_S3_BUCKET}.s3.amazonaws.com;
			proxy_set_header x-amz-cf-id "";
		}

		location ^~ /remote/thumb/ {
			aws_sign;
			internal;
			rewrite ^/remote/thumb/(.*) /$1 break;
			proxy_pass http://${AWS_S3_BUCKET}.s3.amazonaws.com;
			proxy_set_header Host ${AWS_S3_BUCKET}.s3.amazonaws.com;
			proxy_set_header x-amz-cf-id "";
		}

		location /hls/ {
			vod hls;
			add_header Access-Control-Allow-Headers '*';
			add_header Access-Control-Allow-Origin '*';
			add_header Access-Control-Allow-Methods 'GET, HEAD, OPTIONS';
		}

		# location ~ ^/dash/([^\-]+)\-.* {
		location ~ ^/dash/videos/([^/]+)/ {
			vod dash;

			vod_drm_enabled on;
			vod_drm_request_uri "/widevine/$1";
			vod_drm_single_key on;
			# vod_min_single_nalu_per_frame_segment

			add_header Access-Control-Allow-Headers '*';
			add_header Access-Control-Allow-Origin '*';
			add_header Access-Control-Allow-Methods 'GET, HEAD, OPTIONS';
		}

		location /mss/ {
			vod mss;
			add_header Access-Control-Allow-Headers '*';
			add_header Access-Control-Allow-Origin '*';
			add_header Access-Control-Allow-Methods 'GET, HEAD, OPTIONS';
		}

		location ^~ /drm {
			internal;
			proxy_pass http://keymaker-vod.herokuapp.com/api;
			# proxy_set_header Host $http_host;
		}

		location /thumb {
			vod thumb;
			add_header Access-Control-Allow-Headers '*';
			add_header Access-Control-Allow-Origin '*';
			add_header Access-Control-Allow-Methods 'GET, HEAD, OPTIONS';
		}

		location /status {
			vod_status;
		}
	}
}


